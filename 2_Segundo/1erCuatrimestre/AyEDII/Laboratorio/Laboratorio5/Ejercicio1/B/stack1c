#include <stdlib.h>
#include <assert.h>
#include <stdbool.h>
#include "stack.h"

struct _s_stack{
    struct _s_node *fst;
    unsigned int size; 
};

struct _s_node{
    stack_elem elem; 
    struct _s_node *next; 
};

bool size_pos(stack s){
    bool res = true; 
    res = (s->size)>0; 
    return res; 
}

bool size_es_cero(stack s){
    bool res = true; 
    res = (s->size)==0; 
    return res; 
}

stack stack_empty(){
    stack s=NULL; 
    s = malloc(sizeof(struct _s_stack));
    s->fst=NULL; 
    s->size=0u; 
    return s; 
}

stack stack_push(stack s, stack_elem e){
    assert(size_pos(s)||size_es_cero(s));
    struct _s_node *p=NULL; 
    p = malloc(sizeof(struct _s_node));
    p->elem=e;
    p->next=s->fst;
    s->fst=p;
    s->size=s->size+1u;
    assert(size_pos(s));
    return s;
}

stack stack_pop(stack s) {
    assert(!stack_is_empty(s));
    struct _s_node *p = NULL;
    p = (s->fst);
    s->fst = (s->fst)->next;
    s->size = s->size - 1u;
    p->next = NULL;
    free(p);
    p = NULL;
    return s;
}

/*
stack stack_pop(stack s){
    assert(s->fst!=NULL);
    assert(size_pos(s));
    struct _s_node *p=NULL; 
    p = s->fst;
    if ((s->fst)->next!=NULL){
        s->fst = s->fst->next;        
        free(p);
        p=NULL; 
        s->size=s->size-1u;    
    }  
    else{
        free(p);
        s->fst=NULL; 
        s->size = 0u;
    }        
    assert(size_pos(s)||size_es_cero(s));
    return s; 
}
*/

unsigned int stack_size(stack s){
    assert(size_pos(s)||size_es_cero(s));
    return s->size; 
}

stack_elem stack_top(stack s){
    assert(s!=NULL); //OJO LO QUE NO TIENE QUE SER NULL ES S
    assert(size_pos(s));
    stack_elem e = s->fst->elem;
    assert(size_pos(s));
    return e;
}

/*
bool stack_is_empty(stack s){
    assert(size_pos(s)||size_es_cero(s));
    bool res = true; 
    res = s->size == 0u; 
    assert(size_pos(s)||size_es_cero(s));
    return res; 
}
*/

bool stack_is_empty(stack s) {
    return (s->size == 0 && s->fst == NULL);
}

stack_elem *stack_to_array(stack s){
    stack_elem *array=NULL; 
    array = calloc(stack_size(s),sizeof(stack_elem));

    struct _s_node *p=NULL; 
    p = s->fst; 

    for(unsigned int i = 0u; i<stack_size(s);i++){
        array[(stack_size(s)-i)-1u] = p->elem;
        p = p->next;
    }
    return array;
}

stack stack_destroy(stack s){
    assert(size_pos(s)||size_es_cero(s));
    struct _s_node *p=NULL; 
    p = s->fst;
    while (s->fst!=NULL){
        p = s->fst; 
        s->fst = s->fst->next; 
        free(p);
        p = NULL;  //EN LA ultima iteracion no queda colgando
    }
    free(s);
    s = NULL;                           //Ojooooooooooooooooooooooooooooo
    s->size=0u;
    assert(size_es_cero(s));
    return s; 
}
